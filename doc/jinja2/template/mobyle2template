{#- ############################################################ 

A jinja template to convert a mobyle program xml to a moa template  

############################################################ -#}

{#- #################### Format the command line snippet -#}
{%- macro generate_formatter(par) -%}
{%- for p in x("format/code", par) -%}
{%- if p.attrib.get('proglang') == 'python' -%}
$(shell python -c 'print {{ p.text|replace("value", "$(1)")|replace("\n", "") }}')
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

{#- #################### Macro for creating the command line -#}
{%- macro parameters_commandline(  ) -%}

{%- for category in x('/program/parameters/paragraph') %}
{%-   for par in category.iter('parameter') %}
{%-     set parName = x('name', par).text -%}
{{ "\t\t" }}$(call {{ moaid }}_{{ parName }}_formatter,$({{ moaid }}_{{ parName }}))  $({{ moaid }}_{{ parName }})  \
{%    endfor -%}
{%- endfor -%}
{%- endmacro -%}

{#- #################### Macro for a regular variable -#}
{%- macro regular_variable(par, categoryName) %}
{%- set parName = x('name', par).text %}
{%- if x('@ismandatory', par).text == '1' or categoryName == 'required' %}
moa_must_define += 
{%- else %}
moa_may_define += 
{%- endif -%}
{{ ' ' }}{{ moaid }}_{{ parName }}
{{ moaid }}_{{ parName }}_help = {{ x('prompt', par).text }}
{{ moaid }}_{{ parName }}_category = {{  categoryName }}
{# ########## Default parameter value #}
{%-     set pardef = x('vdef/value', par).text -%}
{%-     if pardef %}
{{ moaid }}_{{ parName }}_default = {{ pardef }}
{% endif -%}
{#- ########## Parameter type -#}
{% set datatype = x('type/datatype/class', par).text -%}
{% if datatype == 'Integer' -%}
{{ moaid }}_{{ parName }}_type = integer
{% elif datatype == 'Float' -%}
{{ moaid }}_{{ parName }}_type = float
{% elif datatype == 'String' -%}
{{ moaid }}_{{ parName }}_type = string
{% elif datatype == 'Boolean' -%}
{{ moaid }}_{{ parName }}_type = set
{{ moaid }}_{{ parName }}_allowed = 0 1
{% elif datatype == 'Choice' -%}
{{ moaid }}_{{ parName }}_type = set
{{ moaid }}_{{ parName }}_allowed = 
{% elif datatype == 'Filename' -%}
{{ moaid }}_{{ parName }}_type = file
{% elif datatype == 'Text' -%}
{{ moaid }}_{{ parName }}_type = file
{% elif datatype == 'Tree' -%}
{{ moaid }}_{{ parName }}_type = file
{% else %}
UNKOWN DATATYPE {{ datatype }}
{% endif %}
{{ moaid }}_{{ parName }}_formatter = {{ generate_formatter(par) }}
{%- endmacro -%}

{%- macro input_files(p, categoryName) %}

{% endmacro -%}


# Moa template converted from Mobyle XML
# See https://projets.pasteur.fr/wiki/mobyle
#
# From the mobyle XML 
{% for c in root.itersiblings(tag=etree.Comment, preceding=True) -%}
# {{ c }}
{% endfor -%}
#
# Include MOA definitions
include $(MOABASE)/template/moa/prepare.mk

#
{% set moaid = x('/program/head/name').text %}
moa_id = {{ moaid }}
template_title = {{ x('/program/head/doc/title').text }}
template_description = {{ x('/program/head/doc/description/text').text }}

{#- ############################################################

Process parameters

############################################################ -#}
{%- for category in x('/program/parameters/paragraph') %}
{%-   for par in category.iter('parameter') %}
{%-     set datatype = x('type/datatype/class', par).text %}
{%-     set catName = x('name', category).text %}
{%-     if catName == 'input' and datatype == 'Sequence' %}
{%-     else %}
{{ regular_variable(par, catName) }}
{%-     endif %}
{%-   endfor %}
{%- endfor %}

{# main part of the template #}
include $(MOABASE)/template/moa/core.mk

.PHONY: {{ moaid }}_prepare
{{ moaid }}_prepare:
{{ "\t" }}@echo "Warning - this is an autogenerated Moa template!"
{{ "\t" }}@echo "This message should haven been removed after testing"

.PHONY: {{ moaid }}_post
{{ moaid }}_post:

.PHONY: {{ moaid }}
{{ moaid }}:
{{ "\t" }}echo {{ x('/program/head/command').text }} \
{{ parameters_commandline(  ) }}

