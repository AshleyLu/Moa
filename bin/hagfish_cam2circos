#!/usr/bin/env python
"""
convert a cam file to circos
"""

#templates for the circos configuration
CIMAGE="""
<image>
dir = /tmp
file  = circos.png
24bit = yes
png = yes
#svg = yes
# radius of inscribed circle in image
radius         = 500p
background     = white
# by default angle=0 is at 3 o'clock position
angle_offset   = -90
#angle_orientation = counterclockwise

auto_alpha_colors = yes
auto_alpha_steps  = 5
</image>


"""
CIDEOGRAM="""
<ideogram>

<spacing>

default = 10u

</spacing>

# thickness (px) of chromosome ideogram
thickness        = 100p
stroke_thickness = 2
# ideogram border color
stroke_color     = black
fill             = yes
# the default chromosome color is set here and any value
# defined in the karyotype file overrides it
fill_color       = black

# fractional radius position of chromosome ideogram within image
radius         = 0.85r
show_label     = yes
label_font     = condensedbold
label_radius   = dims(ideogram,radius) + 0.05r
label_size     = 20
label_parallel = yes

# cytogenetic bands
# band_stroke_thickness = 2

# show_bands determines whether the outline of cytogenetic bands
# will be seen
show_bands            = no

</ideogram>
"""
CTICKS="""
show_ticks          = yes
show_tick_labels    = yes

grid_start         = dims(ideogram,radius_inner)-0.5r
grid_end           = dims(ideogram,radius_outer)+100

<ticks>
skip_first_label     = no
skip_last_label      = no
radius               = dims(ideogram,radius_outer)
tick_separation      = 2p
min_label_distance_to_edge = 0p
label_separation = 5p
label_offset     = 2p
label_size = 8p
multiplier = 1e-6
color = black

<tick>
spacing        = 5u
size           = 5p
thickness      = 2p
color          = black
show_label     = no
label_size     = 8p
label_offset   = 0p
format         = %d
grid           = yes
grid_color     = grey
grid_thickness = 1p
</tick>
<tick>
spacing        = 10u
size           = 8p
thickness      = 2p
color          = black
show_label     = yes
label_size     = 12p
label_offset   = 0p
format         = %d
grid           = yes
grid_color     = dgrey
grid_thickness = 1p
</tick>
</ticks>
"""
VERSION=0.1

import os
import sys
import logging
import optparse
import subprocess as sp

parser = optparse.OptionParser(version=VERSION)

parser.add_option('-s', dest='sequence', help='Input Sequence to analyse')
parser.add_option('-o', dest='output', help='Generated circos file')

parser.add_option('-C', dest='circosbase', help='Location of the circos installation')
parser.add_option('-v', dest='verbose', action="count", 
                  help='Show debug information')
parser.add_option('-c', dest='camDirs', action='append',
                    metavar='DIR', help="Directory with .cam files to parse")
parser.add_option('--cX', dest='camLimit',  type='int',
                    help="Limit of pairs to read from each cam file")

(options, args) = parser.parse_args()

#set up logging
l = logging.getLogger('hagfish')

handler = logging.StreamHandler()
logmark = chr(27) + '[0;37;44mHAGFISH' + \
          chr(27) + '[0m ' 

formatter = logging.Formatter(
    logmark + '%(levelname)-6s %(message)s')

handler.setFormatter(formatter)
l.addHandler(handler)

if options.verbose >= 2:
    l.setLevel(logging.DEBUG)
elif options.verbose == 1:
    l.setLevel(logging.INFO)
else:
    l.setLevel(logging.WARNING)
    
#Welcome message
l.info("Start %s" % sys.argv[0])

#get circos info
if options.circosbase:
    circosbase = options.circosbase
else:
    circosbase = sp.Popen(["which", "circos"], stdout=sp.PIPE).communicate()[0].strip()
    circosbase = circosbase.replace('/bin/circos', '')
l.debug("circos is installed in %s" % circosbase)

#get sequence
with open(options.sequence, 'r') as F:
    seqid = F.readline().strip()[1:].split()[0]
    l.debug("Discovered sequence id: %s" % seqid)
    seqlist = []    
    while True:
        line = F.readline()
        if not line: break
        seqlist.append(line.strip())
    seq = "".join(seqlist)
    del(seqlist)
    l.debug("Read %s nucleotides" % len(seq))
    


#gemerate karyotype file
with open("%s.karyotype" % options.output, 'w') as F:
    F.write("chr - %s %s 1 %d blue" % (seqid, seqid, len(seq)))
    
#generate links file
linkCount = 0
if options.camLimit:
    l.info("Cam files will be truncated after %d records" % 
        options.camLimit)
with open("%s.links" % options.output, 'w') as F:
    for inDir in options.camDirs:
        l.info("Processing cam folder %s" % inDir)
        for inFile in os.listdir(inDir):
            if not inFile[-4:] == '.cam':
                continue
            l.info("Processing cam file %s" % inFile)
            linkCountF = 0
            with open(os.path.join(inDir, inFile)) as G:
                while True:
                    line = G.readline()
                    if not line: break
                    linkCountF += 1
                    linkCount += 1
                    if options.camLimit and linkCountF > options.camLimit: 
                        break
                    pos1, size, pos2 = map(int, line.split())
                    F.write("link%09d %s %d %d\n" % (
                        linkCount, seqid, pos1, pos1+1))
                    F.write("link%09d %s %d %d\n" % (
                        linkCount, seqid, pos2, pos2+1))
    
#generate circos file
with open(options.output, 'w') as F:
    F.write(
        """
        <colors>
            <<include %(circosbase)s/etc/colors.conf>>
        </colors>
        
        <fonts>
            <<include %(circosbase)s/etc/fonts.conf>>
        </fonts> 
        """ % locals())
    F.write(CTICKS)
    F.write(CIMAGE)
    F.write(CIDEOGRAM)
    F.write("karyotype = %s.karyotype" % options.output)
    F.write("""
        
        chromosomes_units           = 5000
        
        chromosomes_display_default = yes
        
        anglestep       = 0.5
        minslicestep    = 10
        beziersamples   = 40
        debug           = no
        warnings        = no
        imagemap        = no
        
        units_ok = bupr
        units_nounit = n
        """ % locals())
    
    #create links
    F.write("""
        <links>
        z      = 0
        radius = 0.95r
        bezier_radius = 0.1r
        
        <link segdup>
        show         = yes
        color        = vvdgrey
        thickness    = 2
        file         = %s.links
        record_limit = 2500
        </link>
        
        </links>

        """% options.output)

