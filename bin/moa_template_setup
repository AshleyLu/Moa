#!/usr/bin/env python
"""
Little helper script to prepare a template directory

"""
import argparse
import datetime
import os
import sys
import jinja2

import Yaco

LICENSES = {
    'gplv3' : 'http://www.gnu.org/licenses/gpl-3.0.txt',
    'gplv2' : 'http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt',
}

parser = argparse.ArgumentParser(description="Prepare a template for github")
parser.add_argument('dir', help='containing the directory')
parser.add_argument('-f', '--force', help='force overwriting of files',
                    action='store_true', default=False)
parser.add_argument('-l', '--license', nargs='?', default='gplv3',
                    help=('license for this template, choose ' +
                                     'from: %s (default gplv3)') % (
                                         ', '.join(LICENSES)))
args = parser.parse_args()

def exerr(message):
    sys.stderr.write(message)
    sys.exit(-1)

def process_dir():
    indir = args.dir
    os.chdir(indir)

    os.system('git init')
    template_file = 'template'
    if not os.path.exists(template_file):
        exerr("cannot find template file")

    template = Yaco.Yaco()
    template.load(template_file)

    if (not os.path.exists('.gitignore')) or args.force:
        with open('.gitignore', 'w') as F:
            F.write('*\n')

    if (not os.path.exists('COPYING')) or args.force:
        os.system('wget %s -O COPYING' % LICENSES[args.license])

    j = jinja2.Template(JTEMPLATE)
    if (not os.path.exists('README.md')) or args.force or True:
        print
        with open('README.md', 'w') as F:
            F.write(j.render(
                {'t': template,
                 'license' : args.license,
                 'year' : datetime.datetime.now().year,
             }))

    else:
        print "README.md exists - use '-f' to overwrite"

    os.system('git add -f README.md COPYING')
    os.system('git add -f template *.jinja2')

    print "possible commands that might need to be executed"
    print "writing README.md"
    print "hub create"
    print 'git commit -m "autogenerated license & readme"'
    print 'git push origin master'


## Jinja template
JTEMPLATE = """# Moa template "{{ t.moa_id }}"

Copyright {{ year }}, {{ t.author }}

This software is under the {{ license }} license, please see "COPYING"
for details

{% macro printpar(p) -%}
{{ p }}
:    {% if t.parameters[p].help -%}
         {{t.parameters[p].help}}
     {%- else -%}
     	 *(no help provided)*
     {%- endif %}

     - *type:*
       {%- if t.parameters[p]['type'] -%}
          {{ t.parameters[p].type }}
       {%- else -%}
          String
       {%- endif %}<br>
     - optional: {%- if t.parameters[p]['optional'] == True %}yes{% else %}no{% endif %}
{% endmacro -%}

{%- macro printfs(f) -%}
{{ f }}
:    {% if t.filesets[f].help -%}
         {{ t.filesets[f].help }}
     {%- else -%}
     	 *(no help provided)*
     {%- endif %}

     - *type:* {{ t.filesets[f].type }}<br>
     - *category:* {{ t.filesets[f].category }}<br>
     - *optional:* {% if t.filesets[f].optional %}yes{% else %}no{% endif %}

{% endmacro %}

{% if t.description %}
## Description

{{ t.description }}
{% endif %}

## Filesets

{% for p in t.filesets -%}
{{ printfs(p) }}
{%- endfor %}

## Parameters

{% for p in t.parameters -%}
{%- if p[0] != "_" and p[:4] != "moa" %}{{printpar(p)}}{% endif %}
{%- endfor %}

## Private parameters

{% for p in t.parameters -%}
{%- if p[0] == "_" or p[:4] != "moa" %}{{printpar(p)}}{% endif %}
{%- endfor %}

## General information

* Author: {{ t.author }}
* Backend: {{ t.backend }}


*This file is automatically generated by "moa_template_setup", part of
 the moa software (see: http://mfiers.github.com/Moa/)

"""

if __name__ == "__main__":
    process_dir()