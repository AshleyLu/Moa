#!/usr/bin/env python2.4

import os
import sys
import logging
import optparse

try:
    import pygtk
    pygtk.require("2.0")
except:
    pass
try:
    import gtk
    import gtk.glade
except:
    sys.exit(1)

### Options
parser = optparse.OptionParser()
#parser.add_option('-f', '--force', dest='force', action='store_true',
#                  help = 'Force action')
(options, args) = parser.parse_args()

l = logging.getLogger('gmoa')
handler = logging.StreamHandler()
formatter = logging.Formatter('\033[0;1m%(levelname)-8s\033[0m %(asctime)-24s %(message)s')
handler.setFormatter(formatter)
l.addHandler(handler)
l.setLevel(logging.DEBUG)
l.debug("Loading gmoa")

if not os.environ.has_key("MOABASE"):
    l.critical("need to set MOABASE environment variable")
    sys.exit(1)
       
MOABASE = os.environ["MOABASE"]
TEMPLATEDIR = os.path.join(MOABASE, 'template')

class GMoaGUI:
    """This is an Hello World GTK application"""
    
    def __init__(self):
        
        #Set the Glade file
        self.gladefile = "/home/cflmwf/project/gmoa/gmoa.glade"  
        self.wTree = gtk.glade.XML(self.gladefile)         
        self.wTree.signal_autoconnect({
                "on_gmoaWindow_destroy" : gtk.main_quit,
                "on_selectWorkDir" : self.selectWorkDir,
                "on_workDirCancelbutton_clicked" : self.workDirCancel,     
                "on_workDirSelectButton_clicked" : self.workDirSelect,      
                "on_newTemplateGenerateButton_clicked": self.generateTemplate, 
                "on_generateTemplateCloseButton_clicked" : self.closeGeneratedTemplate,
               })

        #Get the Main Window, and connect the "destroy" event
        self.window = self.wTree.get_widget("gmoaWindow")
        l.debug("gmoa window %s " % self.window)
        #if (self.window):
        #    self.window.connect("destroy", gtk.main_quit)
        
    def selectWorkDir(self, widget):
        """Show the select folder dialog"""        
        wdd = self.wTree.get_widget("chooseWorkDirDialog")
        l.debug("start select work dir (%s)" % wdd)        
        wdd.show()
    
    def workDirCancel(self, widget):
        l.debug("cancel select work dir")   
        wdd = self.wTree.get_widget("chooseWorkDirDialog")     
        wdd.hide()
        
    def workDirSelect(self, widget):
        wdd = self.wTree.get_widget("chooseWorkDirDialog")     
        wdd.hide()
        filename = wdd.get_filename()
        l.debug("Workdir selected %s" % filename)
        self.wTree.get_widget("currentFolderLabel")\
            .set_label(filename)
        
    def generateTemplate(self, widget):
        l.debug("start template generation")
        dlg = self.wTree.get_widget("newMakefileDialog")
        dlg.show()
        txtbox = self.wTree.get_widget("generatedTemplateText")
        txtbuf = txtbox.get_buffer()
        txtbuf.set_text("generated template comes here")
        
    def closeGeneratedTemplate(self, widget):
        dlg = self.wTree.get_widget("newMakefileDialog")
        dlg.hide()
        
        
if __name__ == "__main__":
    l.debug("Starting gmoa")
    gmoaGui = GMoaGUI()
    gtk.main()