#!/usr/bin/env python

import os
import sys
import logging
import optparse

try:
    import pygtk
    pygtk.require("2.0")
except:
    pass
try:
    import gtk
    import gtk.glade
except:
    sys.exit(1)

### Options
parser = optparse.OptionParser()
#parser.add_option('-f', '--force', dest='force', action='store_true',
#                  help = 'Force action')
(options, args) = parser.parse_args()

l = logging.getLogger('gmoa')
handler = logging.StreamHandler()
formatter = logging.Formatter('\033[0;1m%(levelname)-8s\033[0m %(asctime)-24s %(message)s')
handler.setFormatter(formatter)
l.addHandler(handler)
l.setLevel(logging.DEBUG)
l.debug("Loading gmoa")

if not os.environ.has_key("MOABASE"):
    l.critical("need to set MOABASE environment variable")
    sys.exit(1)
       
MOABASE = os.environ["MOABASE"]
TEMPLATEDIR = os.path.join(MOABASE, 'template')

class GMoaGUI:
    """This is an Hello World GTK application"""
    
    def __init__(self):
        #Set the Glade file
        self.gladefile = "./gmoa.glade"  
        self.wTree = gtk.glade.XML(self.gladefile)         
        self.wTree.signal_autoconnect({
                "gmoaQuit" : self.quit,
               })
        
        #Get the Main Window, and connect the "destroy" event
        self.window = self.wTree.get_widget("gmoaMainWindow")
        l.debug("gmoa window %s " % self.window)

        self.dirTreeStore = gtk.TreeStore(str)
        self.createDirTreeView()
        self.dirTreeBasePath = ''
        
        
    def createDirTreeView(self, root="/"):
        if root != '/':
            self.dirTreeBasePath, newRoot = \
                os.path.split(root)
        else:
            newRoot = "/"
        self.dirTreeStore.clear()
        
        par = self.dirTreeStore.append(None, newRoot)
        for x in os.listdir(root):
            child = self.dirTreeStore.append(par, [x])
            self.dirTreeStore.append(child, ['..'])
        self.dirTreeview = gtk.TreeView(self.dirTreeStore)
        #self.dirTreeview.set_property(
        #        "headers-visible", False)
        col = gtk.TreeViewColumn("Folders")
        self.dirTreeview.append_column(col)
        cell = gtk.CellRendererText()
        col.pack_start(cell, True)
        self.dirTreeview.set_search_column(0)
        col.set_sort_column_id(0)

        self.dirTreeview.connect("row-expanded", self.dirTreeViewRowExpand)
        self.dirTreeview.connect("row-activated", self.dirTreeViewRowActivated)

        col.add_attribute(cell, 'text', 0)
        c = self.wTree.get_widget("dirTreeContainer")
        c.add(self.dirTreeview)
        c.show_all()
        
    def dirTreeViewRowActivated(self, tview, tpath, tcolumn):
        l.debug("activated row %s %s %s" % (tview, tpath, tcolumn))
        titer = self.dirTreeStore.get_iter(tpath)
        fullPath = self.dirTreeGetFullPath(titer)
        self.createDirTreeView(fullPath)
        
    def dirTreeGetFullPath(self, titer):
        
        fp = [self.dirTreeStore.get_value(titer, 0)]
        ctiter = titer.copy()
        while self.dirTreeStore.iter_parent(ctiter):
            ctiter = self.dirTreeStore.iter_parent(ctiter)
            fp.insert(0, self.dirTreeStore.get_value(ctiter, 0))
        return os.path.join(self.dirTreeBasePath, *fp)
        
    def dirTreeViewRowExpand(self, tview, titer, tpath):
        val = self.dirTreeStore.get_value(titer, 0)
        l.debug("expanded %s" % val)
        firstChild = self.dirTreeStore.iter_nth_child(titer, 0)
        if self.dirTreeStore.get_value(firstChild, 0) == '..':
            l.debug("dynamic expansion  %s" % val)
            #remove the '..'
            self.dirTreeStore.remove(firstChild)
            
            #get the full path
            fullPath = self.dirTreeGetFullPath(titer)
            for x in os.listdir(fullPath):
                child = self.dirTreeStore.append(titer, [x])
                self.dirTreeStore.append(child, ['..'])
            
            #reexpand with the new children
            self.dirTreeview.expand_row(tpath, False)
        #print self.dirTreeStore.iter_parent(titer)
        
    def menuNew(self, widget):
        """Show the select folder dialog"""  
        w =self.wTree.get_widget("newFolderChooseDialog")
        l.debug("selectNewFolder (%s)" % w)
        w.show()
        ltl = self.wTree.get_widget("newTypeList")
        templates = os.listdir(TEMPLATEDIR)
        ltl.set_popdown_strings(templates)
        
    def closeNewDialog(self, widget):
        w =self.wTree.get_widget("newFolderChooseDialog")
        l.debug("clow new dialog (%s)" % w)
        w.hide()
        
        
    def quit(self, widget):
        l.debug("quit")
        gtk.main_quit()
        
    def workDirCancel(self, widget):
        l.debug("cancel select work dir")   
        wdd = self.wTree.get_widget("chooseWorkDirDialog")     
        wdd.hide()
        
    def workDirSelect(self, widget):
        wdd = self.wTree.get_widget("chooseWorkDirDialog")     
        wdd.hide()
        filename = wdd.get_filename()
        l.debug("Workdir selected %s" % filename)
        self.wTree.get_widget("currentFolderLabel")\
            .set_label(filename)
        
    def generateTemplate(self, widget):
        l.debug("start template generation")
        dlg = self.wTree.get_widget("newMakefileDialog")
        dlg.show()
        txtbox = self.wTree.get_widget("generatedTemplateText")
        txtbuf = txtbox.get_buffer()
        txtbuf.set_text("generated template comes here")
        
    def closeGeneratedTemplate(self, widget):
        dlg = self.wTree.get_widget("newMakefileDialog")
        dlg.hide()
        
        
if __name__ == "__main__":
    l.debug("Instantiate gmoa")
    gmoaGui = GMoaGUI()
    l.debug("going into gtk.main")
    gtk.main()