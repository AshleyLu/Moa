#!/usr/bin/env python
# 
# Copyright 2009 Mark Fiers, Plant & Food Research
# 
# This file is part of Moa - http://github.com/mfiers/Moa
# 
# Moa is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
# 
# Moa is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Moa.  If not, see <http://www.gnu.org/licenses/>.
# 
"""
moa frontend

This script serves as a command dispatcher for all moa functionality

"""

import os
import re
import sys
import site
import shutil
import pprint
import optparse
import subprocess

#moa specific libs - first prepare for loading libs
if not os.environ.has_key('MOABASE'):
    raise Exception("MOABASE is undefined")

#process the .pth file in the $MOABASE/bin folder !
site.addsitedir(os.path.join(os.environ['MOABASE'], 'lib', 'python'))

MOABASE = os.environ["MOABASE"]
TEMPLATEDIR = os.path.join(MOABASE, 'template')

##
## Read the moa configutation file 
ETC = {}
for line in open(os.path.join(MOABASE, 'etc', 'moa.conf.mk')).readlines():
    line = line.strip()
    if not line: 
        continue
    if line[0] == '#': 
        continue
    l = [x.strip() for x in line.split('=', 1)]
    if len(l) == 2:
        ETC[l[0]] = l[1]

import moa.job
import moa.archive
from moa import runMake
import moa.conf
import moa.info
import moa.unittests
from moa import utils
from moa.exceptions import *

## Init the logger
import moa.logger
l = moa.logger.l

USAGE = """Usage: %prog [options] COMMAND args

Commands:

New Moa makefiles:

  new: moa new -t 'SensibleTitle' -p ProjectName TEMPLATE1 ...

    Generate a new makefile based on the template names provided. You
    should provide a sensible title for your analysis (No spaces -
    A-Za-z0-9_, a sensible name is probably smart)

  list: (moa list)

    List all known templates

Configuration (in moa.mk):

  conf set: moa conf set [KEY]=[VALUE]
    Set a variable in moa.mk. This is implemented here to make
    sure that multiple threads can safely write to one moa.mk.     
"""

DESCRIPTION = "Utility script for use with Moa makefiles"

## define & parse command line options  
parser = optparse.OptionParser(usage=USAGE, description=DESCRIPTION)

parser.add_option('-f', '--force', dest='force', action='store_true',
                  help = 'Force an action, if applicable.')

parser.add_option("-v", "--verbose", dest="verbose",
                  action="store_true", help="verbose output")

parser.set_defaults(threads=1)
parser.add_option("-j", dest="threads",
                  help="threads to use when running Make (corresponds " +
                  "to the make -j parameter)")


parserN = optparse.OptionGroup(parser, "For use with moa new")
parser.set_defaults(title="", directory=".")

parserN.add_option("-t", "--title", dest="title", help="Job title")
parserN.add_option("-d", "--directory", dest="directory",
                  help="Directory to create the new template in (default: .)")
parser.add_option_group(parserN)

(options, args) = parser.parse_args()

if options.verbose:
    moa.logger.setVerbose()
    
#make sure the MOA_THREADS env var is set - this is used by MOA later
#on
os.putenv('MOA_THREADS', "%s" % options.threads)
if options.verbose:
    os.putenv('MOA_VERBOSE', "-v")

##
## Check for deprecated style makefile

_check = subprocess.Popen("cat Makefile 2>/dev/null |grep dont_include_moabase ",
                          shell=True,
                          stdout=subprocess.PIPE).communicate()[0].strip()
if 'dont_include_moabase' in _check:
    includeline=re.compile(r'include \$\(shell echo \$\$MOABASE\)/template/.*\.mk$')
    l.warning("Old style Makefile, automatically updating!")
    l.warning("The old Makefile will be copied to Makefile.old")
    shutil.move('Makefile', 'Makefile.old')
    F = open('Makefile.old')
    G = open('Makefile', 'w')
    count_includes = 0
    dim_removed = False
    imb_removed = False
    for line in F.readlines():
        if re.match('^dont_include_moabase=.*$', line.strip()):
            dim_removed = True
            l.debug("Removing %s" % line)
            continue
        if line.strip() == 'include $(shell echo $$MOABASE)/template/__moaBase.mk':
            imb_removed = True
            l.debug("Removing %s" % line)
            continue
        if includeline.match(line.strip()):
            l.debug("found an include line")
            l.debug(line)
            count_includes += 1
            
        line = line.replace('$(shell echo $$MOABASE)', '$(MOABASE)')
        G.write(line)
    F.close()
    G.close()
    if count_includes > 1:
        l.critical("This makefile might NOT work - including more than one template")
        l.critical("is not allowed (anymore :( )")
        sys.exit(1)
    if count_includes == 0:
        l.warning("Odd - you dont' seem to be including any template, have a look")
        sys.exit(1)
    if not dim_removed and imb_removed:
        l.error("Updated Makefile - unsure of success - please check")
        sys.exit(1)
    l.error("Updated Makefile - everything looks fine (check anyway)")
    sys.exit()


##
## Command dispatch
## 
if __name__ == "__main__":    
    l.debug("MOABASE : %s" % MOABASE)

    if len(args) == 0:
        runMake.runMakeAndExit(verbose=options.verbose)

    command = args[0]
    newargs = args[1:]
    l.debug("start moa %s" % command)
    l.debug("with args %s" % args[1:])

    if command == 'run':
        runMake.runMakeAndExit(args=newargs, verbose=options.verbose)
    elif command == 'rawinfo':
        pprint.pprint(moa.info.info(os.getcwd()))
        
    #Create new jobs
    elif command == 'job':
        moa.job.handler(options, newargs)
    elif command == 'new':
        #shortcut for moa job new
        moa.job.handler(options, args)

    #pack & unpack trees
    elif command == 'archive':
        moa.archive.handler(options, newargs)
    elif command == 'list':
        #shortcut for moa job list
        for job in moa.job.list():
            print job
    #configuration stuff
    elif command == 'set':
        moa.conf.handler(options, newargs)
    #unittests
    elif command == 'test':
        moa.unittests.run()
    else:
        #fire arguments of to make
        runMake.runMakeAndExit(args=args, verbose=options.verbose)    
    utils.exit()
