#!/usr/bin/env python
# 
# Copyright 2009 Mark Fiers, Plant & Food Research
# 
# This file is part of Moa - http://github.com/mfiers/Moa
# 
# Moa is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
# 
# Moa is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Moa.  If not, see <http://www.gnu.org/licenses/>.
# 
"""
Moa frontend

This script serves as a command dispatcher for all moa functionality
"""

import os
import sys
import optparse

if not os.environ.has_key('MOABASE'):
    print "The environment variable MOABASE is not set"
    print "please refer to the documentation or run"
    print "source (PATH/TO/MOA/INSTALL/bin/moainit.sh)"
    sys.exit(1)

MOABASE = os.environ["MOABASE"]

#moa specific libs
import moa.job
import moa.archive
from moa import runMake
import moa.conf
import moa.info
import moa.api
import moa.project
import moa.unittests
import moa.checkTemplate

## Initialize the logger
import moa.logger
from moa.logger import l
## A quick hack to set verbosity before reading command line arguments
if ('-v' in sys.argv) or ('-vv' in sys.argv):
    moa.logger.setVerbose()

## load moa core modules - these handle most of the operation
from moa.commands import moaCommands
from moa.plugins import moaPlugins
#from moa.hooks import moaHooks
import moa.moajob
import moa.invocation

moaHooks = {}

## Register plugin defined commands
moaPlugins.registerCommands(moaCommands)

## start defining the command line interface
USAGE = moaCommands.generateUsageString(
    "Usage: %prog [options] COMMAND ARGUMENTS\n\nCommands:\n")

## define & parse command line options
parser = optparse.OptionParser(usage=USAGE)

parser.add_option('-f', '--force', dest='force', action='store_true',
                  help = 'Force an action, if applicable.')

parser.add_option("-v", "--verbose", dest="verbose",
                  action="store_true", help="verbose output")

parser.add_option("--bg", dest="background",
                  action="store_true", help="Run moa in the background")

parser.set_defaults(threads=1)
parser.add_option("-j", dest="threads", type='int',
                  help="threads to use when running Make (corresponds " +
                  "to the make -j parameter)")

parser.add_option("-B", dest="remake", action='store_true',
                  help="Reexecute all targets (corresponds to make -B) ")

parser.add_option("--md", dest="makedebug", action='store_true',
                  help="Run Make with -d : lots of extra debugging "+
                  "information")

## See if the plugins have anything to add to the optparse instance:
moaPlugins.registerOptions(parser)

## Parse the options
(options, args) = parser.parse_args()

## Proper setting of verbosity - after parsing of the command line
if options.verbose:
    moa.logger.setVerbose()

## Command dispatcher
if __name__ == "__main__":

    l.debug("MOABASE is '%s'" % MOABASE)

    ## Invocation object contains as much information as possible on
    ## this specific moa run.
    i = moa.invocation.get(options, args)

    ### Prepare plugins
    moaPlugins.prepare(i)
    l.debug('possible commands %s' % moaCommands.keys())
    #see if there is a callback - If so call it
    if moaCommands.hasCallback(i.command):
            moa.hooks.run('before', command, globals())                
            moaCommands.executeCallback(i)
            #same thing - post-function-hooks
            moa.hooks.run('after', command, globals())
            
            sys.exit()

    #No callback, defer this to Make
    
    #append the arguments to make (if there are any)
    #moaInvocation.makeArgs.extend(newargs)
    if not moa.info.isMoaDir(cwd):
        if command:
            l.error("Unknown command: 'moa %s'" % command)
            l.error("Maybe it should be executed in a Moa directory?")
        else:
            l.error("'moa' must be executed within a Moa directory")
        sys.exit(1)
                
    ### Check & fix deprecated template styles
    moa.checkTemplate.checkTemplate(cwd)

    l.debug("Calling make for command %s" % command)
    job = runMake.MOAMAKE(cwd,
                          target = command,
                          verbose = options.verbose,
                          threads = options.threads,
                          makeArgs = moaInvocation.makeArgs,
                          background = options.background)
    returnCode = job.run()    
    sys.exit(returnCode)

    # #utilities
    # elif command == 'ren':
    #     #renumber a moa job
    #     moa.utils.renumber(os.getcwd(), args[1], args[2])
    # #pack & unpack trees
    # elif command == 'archive':
    #     moa.archive.handler(options, newargs)


    
