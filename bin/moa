#!/usr/bin/env python
# 
# Copyright 2009 Mark Fiers, Plant & Food Research
# 
# This file is part of Moa - http://github.com/mfiers/Moa
# 
# Moa is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
# 
# Moa is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Moa.  If not, see <http://www.gnu.org/licenses/>.
# 
"""
A set of moa help functions. Hidden behind one command: moa.

Most of the functions do not have a relationship with each
other.. Maybe I should make separate scripts out of these. Don't know
yet.
"""

import os
import sys
import site
import optparse

#moa specific libs - first prepare for loading libs
if not os.environ.has_key('MOABASE'):
    raise Exception("MOABASE is undefined")

#process the .pth file in the $MOABASE/bin folder !
site.addsitedir(os.path.join(os.environ['MOABASE'], 'lib', 'python'))

MOABASE = os.environ["MOABASE"]
TEMPLATEDIR = os.path.join(MOABASE, 'template')

##
## Read the moa configutation file 
##
ETC = {}
for line in open(os.path.join(MOABASE, 'etc', 'moa.conf.mk')).readlines():
    line = line.strip()
    if not line: 
        continue
    if line[0] == '#': 
        continue
    l = [x.strip() for x in line.split('=', 1)]
    if len(l) == 2:
        ETC[l[0]] = l[1]

import moa.template
import moa.archive
import moa.graph
import moa.conf

## Init the logger
import moa.logger
l = moa.logger.l

USAGE = """Usage: %prog [options] COMMAND args

Commands:

New Moa makefiles:

  new: moa SensibleTitle TEMPLATE1, TEMPLATE2, ...

    Generate a new makefile based on the template names provided. You
    must provide a title for the analysis (No spaces - A-Za-z0-9_, a
    sensible name is probably smart)

  list: (moa list)

    List all known templates

Configuration (in moa.mk):

  conf set: moa conf set [KEY]=[VALUE]
    Set a variable in moa.mk. This is implemented here to make
    sure that multiple threads can safely write to one moa.mk.     
"""

DESCRIPTION = "Utility script for use with Moa makefiles"

## define & parse command line options  
parser = optparse.OptionParser(usage=USAGE, description=DESCRIPTION)
parser.add_option('-f', '--force', dest='force', action='store_true',
                  help = 'Force an action, if applicable..')

parser.add_option("-v", "--verbose", dest="verbose",
                  action="store_true", help="verbose output")

(options, args) = parser.parse_args()

if options.verbose:
    moa.logger.setVerbose()


##
## Command dispatcher
## 
if __name__ == "__main__":    

    l.debug("MOABASE : %s" % MOABASE)

    if len(args) == 0:
        l.error("Need a command")
        parser.print_help()
        sys.exit(1)

    command = args[0]
    newargs = args[1:]
    l.debug("start moa %s" % command)
    l.debug("with args %s" % args[1:])

    #Create new jobs
    if command == 'new':
        title = args[1]    
        templates = args[2:]
        if (not title) or (not templates):
            l.error("Usage: moa new TITLE TEMPLATE(s)")
            sys.exit(-1)
        moa.template.new(templates, title=title, force=options.force)

    #pack & unpack trees
    elif command == 'archive':
        moa.archive.handler(options, args[1:])
    elif command == 'list':
        moa.template.list()
    #configuration stuff
    elif command == 'conf':
        moa.conf.handler(options, newargs)
    else:
        l.error("No command defined!")
        parser.print_help()
        sys.exit(1)
