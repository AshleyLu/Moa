#!/usr/bin/env python
# 
# Copyright 2009 Mark Fiers, Plant & Food Research
# 
# This file is part of Moa - http://github.com/mfiers/Moa
# 
# Moa is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
# 
# Moa is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Moa.  If not, see <http://www.gnu.org/licenses/>.
# 
"""
Moa frontend

This script serves as a command dispatcher for all moa functionality
"""

import os
import sys
import site
import optparse
import textwrap

#moa specific libs - first prepare for loading libs
if not os.environ.has_key('MOABASE'):
    raise Exception("MOABASE is undefined")

#process the .pth file in the $MOABASE/bin folder !
site.addsitedir(os.path.join(os.environ['MOABASE'], 'lib', 'python'))

MOABASE = os.environ["MOABASE"]
TEMPLATEDIR = os.path.join(MOABASE, 'template')

import moa
import moa.job
import moa.archive
from moa import runMake
import moa.conf
import moa.info
import moa.api
import moa.project
import moa.unittests
import moa.checkTemplate

## Initialize the logger
import moa.logger
l = moa.logger.l

## A quick hack to set verbosity before reading command line arguments
if '-v' in sys.argv:
    moa.logger.setVerbose()

## Determine what plugins are loaded
moaPlugins = moa.info.getPlugins()
moaPluginsLoaded = []
moaPluginModules = {}
l.debug("Plugins %s" % moaPlugins)

## load the plugins as seperate modules. A plugin does not need to
## have a python module.
for plugin in moaPlugins:
    pyModule = 'moa.plugin.%s' % plugin
    try:
        _m =  __import__( pyModule, globals(), locals(), ['git'], -1)
        moaPluginModules[plugin] = _m
        moaPluginsLoaded.append(plugin)
        l.debug("Successfully Loaded module %s" % pyModule)
    except ImportError, e:
        if not str(e) == "No module named %s" % plugin:
            raise
        l.debug("No python plugin module found for %s" % plugin)

## Command definitions
moaCommands = {}

## Plugin: define Moa commands
for p in moaPluginsLoaded:
    moaPluginModules[p].defineCommands(moaCommands)
    
## start defining the command line interface
USAGE = "Usage: %prog [options] COMMAND ARGUMENTS\n\nCommands:\n"
moaCommandNames = moaCommands.keys()
moaCommandNames.sort()
for _c in moaCommandNames:
    if moaCommands[_c].get('private', False):
        continue
    USAGE += "\n".join(
        textwrap.wrap(
            '%s: %s' % (_c, moaCommands[_c]['desc']),
            initial_indent=' - ',
            subsequent_indent = '     ')) + "\n"

## define & parse command line options  
parser = optparse.OptionParser(usage=USAGE)

parser.add_option('-f', '--force', dest='force', action='store_true',
                  help = 'Force an action, if applicable.')

parser.add_option("-v", "--verbose", dest="verbose",
                  action="store_true", help="verbose output")

parser.add_option("--bg", dest="background",
                  action="store_true", help="Run moa in the background")

parser.set_defaults(threads=1)
parser.add_option("-j", dest="threads", type='int',
                  help="threads to use when running Make (corresponds " +
                  "to the make -j parameter)")

parser.add_option("-B", dest="remake", action='store_true',
                  help="Reexecute all targets (corresponds to make -B) ")

parser.add_option("--md", dest="makedebug", action='store_true',
                  help="Run Make with -d : lots of extra debugging "+
                  "information")

## See if the plugins have anything to add to the optparse instance:
for p in moaPluginsLoaded:
    if 'defineOptions' in dir(moaPluginModules[p]):
        moaPluginModules[p].defineOptions(parser)

## Parse the options
(options, args) = parser.parse_args()

## Proper setting of verbosity - after parsing of the command line
if options.verbose:
    moa.logger.setVerbose()

## Store all arguments in the environment - we might want to have a
## look at them from the Makefiles
os.putenv("MOAARGS", "%s" % str(args)[1:-1])

### Start initializing the plugins
for p in moaPluginsLoaded:
    if 'prepare' in dir(moaPluginModules[p]):
        moaPluginModules[p].prepare(globals())

### Determine project root (if there is one)
projectRoot = moa.project.findProjectRoot()
if projectRoot:
    l.debug('Project root is %s' % projectRoot)
    os.putenv('MOAPROJECTROOT', projectRoot)

## make sure the MOA_THREADS env var is set - this is used from inside
## the Makefiles later threads need to be treated different from the
## other parameters. multi-threaded operation is only allowed in the
## second phase of execution.
os.putenv('MOA_THREADS', "%s" % options.threads)

## Define extra parameters to use with Make

makeArgs = set()
if options.remake:
    makeArgs.add('-B')
if options.makedebug:
    makeArgs.add('-d')

## Command dispatcher
if __name__ == "__main__":
    cwd = os.getcwd()
    l.debug("MOABASE is '%s'" % MOABASE)
    if options.threads > 1:
        l.debug("Running make with %d threads" % options.threads)

    ## Determine what the command is.
    command = ""
    newargs = []
    if len(args) > 0:
        command = args[0]
        newargs = args[1:]

    l.debug("start moa %s" % command)
    l.debug("with args %s" % args[1:])

    #see if there is a callback - If so call it
    if command in moaCommands:
        if moaCommands[command].has_key('call'):
            l.debug("using a callback for moa %s" % command)
            moaCommands[command]['call'](os.getcwd(), options, newargs)
            sys.exit()

    #No callback, defer this to Make
    
    #append the arguments to make (if there are any)
    makeArgs.update(set(newargs))
    if not moa.info.isMoaDir(cwd):
        if command:
            l.error("'moa %s' must be executed within a Moa directory" %
                    command)
        else:
            l.error("'moa' must be executed within a Moa directory")
        sys.exit(1)
                
    ### Check & fix deprecated template styles
    moa.checkTemplate.checkTemplate(cwd)

    l.debug("Calling make for command %s" % command)
    returnCode = runMake.go(cwd,
                            target = command,
                            verbose = options.verbose,
                            threads = options.threads,
                            makeArgs = makeArgs,
                            background = options.background)
    sys.exit(returnCode)

    # #utilities
    # elif command == 'ren':
    #     #renumber a moa job
    #     moa.utils.renumber(os.getcwd(), args[1], args[2])
    # #pack & unpack trees
    # elif command == 'archive':
    #     moa.archive.handler(options, newargs)


    
