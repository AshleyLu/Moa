#!/usr/bin/env python
# 
# Copyright 2009 Mark Fiers, Plant & Food Research
# 
# This file is part of Moa - http://github.com/mfiers/Moa
# 
# Moa is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
# 
# Moa is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Moa.  If not, see <http://www.gnu.org/licenses/>.
# 

"""
A set of moa help functions. Hidden behind one command: moa.

Most of the functions do not have a relationship with each
other.. Maybe I should make separate scripts out of these. Don't know
yet.

"""

import os
import sys
import re
import time
import site
import copy
import errno
import logging
import optparse
from pprint import pprint as pp

#moa specific libs - first set the path
if not os.environ.has_key('MOABASE'):
    raise Exception("MOABASE is undefined")

#process the .pth file in the $MOABASE/bin folder !
site.addsitedir(os.path.join(os.environ['MOABASE'], 'lib', 'python'))


MOABASE = os.environ["MOABASE"]
TEMPLATEDIR = os.path.join(MOABASE, 'template')

import moa.couchdb
import moa.template
import moa.graph
import moa.conf


#Logging
from moa.utils import logger
l = logger.l

usage = """Usage: %prog [options] COMMAND args

Commands:

New Moa makefiles:

  new: moa -j SensibleJid TEMPLATE1, TEMPLATE2, ...
    Generate a new makefile based on the template names
    provided. Use this in conjuntion with -j.

  list: (moa list)
    List all known templates

Couchdb:

  couchdb get: moa couchdb get [JID] [ATTR]
    Get and print one attribute from a document in Couchdb.

  couchdb doc: moa couchdb doc [JID]
    Get and print a full document from the Couchdb

  couchdb jids: moa couchdb jids
    Print a list of all known jids in the Couchdb.

Configuration (in moa.mk):

  conf set: moa conf set [KEY]=[VALUE]
    Set a variable in moa.mk. This is implemented here to make
    sure that multiple threads can safely write to one moa.mk.     
"""

description="Utility script for use with Moa makefiles"
              
parser = optparse.OptionParser(usage=usage, description=description)
parser.add_option('-f', '--force', dest='force', action='store_true',
                  help = 'Force an action, if applicable..')

parser.set_defaults(couchserver="127.0.0.1:5984")
parser.add_option("-s", "--server", dest="couchserver",
                  help="Couchserver to connect to")

parser.add_option("-j", "--jid", dest="jid",
                  help="Job id for this Moa job")

parser.set_defaults(couchdb="moa")
parser.add_option("-d", "--db", dest="couchdb",
                  help="db to use")

parser.add_option("-v", "--verbose", dest="verbose",
                  action="store_true", help="verbose output")

(options, args) = parser.parse_args()

if not os.environ.has_key("MOABASE"):
    l.critical("need to set MOABASE environment variable")
    sys.exit(1)
    

##########
# Helper functions
##########


def error(d):
    l.error(simplejson.dumps(doc, sort_keys=True, indent=4))
    sys.exit(-1)

#Handle templates - 

if __name__ == "__main__":    
    l.debug("MOABASE : %s" % MOABASE)
    
    if len(args) == 0:
        l.error("Need a command")
        parser.print_help()
        sys.exit(1)

    cserver, cport = options.couchserver.split(":")
    moa.couchdb.connect(cserver, cport, options.couchdb)

    command = args[0]
    l.debug("start moa %s" % command)
    l.debug("with args %s" % args[1:])
                       
    if command == 'new':
        moa.template.new(args[1:], jid=options.jid, force=options.force)

    elif command == 'list':
        moa.template.list()
      
    elif command == 'register':
        moa.couchdb.moaRegister(args[1:])
              
    elif command == 'get':
        docid, query = args[1], args[2]
        value = moa.couchdb.moaGet(docid, query)
        print value
      
    elif command == 'jids':
        print "\n".join(moa.couchdb.getJids())
      
    elif command == 'doc':
        print moa.couchdb.getDocStr(args[1])

    elif command == 'conf':
        subcommand = args[1]
        
        if subcommand == 'set':
            moa.conf.change('set', args[2:])
                      
        elif subcommand == 'append':
            moa.conf.change('append', args[2:])
          
        elif subcommand == 'cache':
            moa.conf.cache()

        else:
            l.error("Invalud moa conf command")
            sys.exit()

    elif command == 'graph':
        subcommand = args[1]
        if subcommand == 'test':
            moa.graph.test()
        else:
            l.error("Invalid moa graph command")
    else:
        l.error("No command defined!")
        parser.print_help()
        sys.exit(1)
