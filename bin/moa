#!/usr/bin/env python

import os
import sys
import logging
import optparse
import pyparsing as pyp

parser = optparse.OptionParser()
parser.add_option('-f', '--force', dest='force', action='store_true',
                  help = 'Force action')
(options, args) = parser.parse_args()

l = logging.getLogger('moa')
handler = logging.StreamHandler()
formatter = logging.Formatter('\033[0;1m%(levelname)-8s\033[0m %(asctime)-24s %(message)s')
handler.setFormatter(formatter)
l.addHandler(handler)
l.setLevel(logging.DEBUG)

if not os.environ.has_key("MOABASE"):
    l.critical("need to set MOABASE environment variable")
    sys.exit(1)
    
    
MOABASE = os.environ["MOABASE"]
TEMPLATEDIR = os.path.join(MOABASE, 'template')

#simpleparser1
simplemakefile = \
        pyp.Literal("include $(shell echo $$MOABASE)/template/") \
        + pyp.Word(pyp.alphas) \
        + pyp.Literal(".mk") \
        + pyp.Optional(pyp.White()) 
        
        
def moaCheck(*args):
    """
    Check moa config in this directory
    """
    if not os.path.exists("./Makefile"):
        l.error("Makefile does not exist, cannot check anything")
        sys.exit(1)
    l.debug('checking')
    F = open('./Makefile', 'r')
    
    #check makefile, at the moment only accepting simple makefiles
    #importing only one makefile
    #include $(shell echo $$MOABASE)/template/traverse.mk

    makefile = F.read()
    l.debug(simplemakefile.parseString(makefile))
    F.close()
    
def moaNew(what):
    """
    Create a new template based makefile in the current dir.
    """
    if os.path.exists("./Makefile"):
        l.debug("Makefile exists!")
        if not options.force:
            l.critical("makefile exists, use force to overwrite")
            sys.exit(1)

    templatefile = os.path.join(TEMPLATEDIR, what + '.mk')
    if not os.path.exists(templatefile):
        l.debug("cannot find %s" % templatefile)
        l.error("No template for %s exists" % what)
        sys.exit(1)
    includeLine = "include $(shell echo $$MOABASE)/template/%s.mk" % what
    l.debug("include: %s" % includeLine)
    l.debug("start write of ./Makefile") 
    F = open("./Makefile", 'w')
    F.write(includeLine + "\n")
    F.close()
    l.info("Written Makefile, try: make help")
    sys.exit(0)
    

if __name__ == "__main__":    
    l.debug("MOABASE : %s" % MOABASE)
    
    if len(args) == 0:
        l.error("Need a command")
        sys.exit(1)

    command = args[0]
    l.info("start moa %s" % command)
                       
    if command == 'new':
        moaNew(args[1])

    if command == 'check':
        moaCheck(args[1:])


