#!/usr/bin/env python

import os
import sys
import math

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib as mpl
#import matplotlib.rc as rc
import pylab as pl

import subprocess

from hagfishUtils import *

## Arguments: General options 
parser = getHagfishOptparser()
addPlotParameters(parser)
options, args = parser.parse_args()

l = getLogger('main', options.verbose)

l.info("starting %s" % sys.argv[0])
    
#load the coverage plots
data = hagfishData(options, args)

#prepare the plot
plot = hagfishPlot(options, data)

class plotter(hagfishPlotBand):
    
    def plotBand(self, layer):
        self.l.debug("plotting layer %d" % layer)

        if layer == 0:
            self.plotLayer0()
        elif layer == 1:
            self.plotLayer1()
        elif layer == 2:
            self.plotLayer2()


    def plotLayer0(self):
        yc = self.yCorrection
        ly = 0
        self.ax.fill_between(
            self.locx,
            self.okh + yc,
            self.okh + self.high + yc,
            alpha = 0.6,
            zorder = ly,
            color=COLOR2)

        self.ax.fill_between(
            self.locx,
            -self.okh + yc,
            (-self.okh - self.low) + yc,
            alpha=0.6,
            color=COLOR3,
            zorder=ly)
        
        self.ax.plot(
            self.locx,
            self.okh + self.high + yc,
            color = 'black', linewidth=0.5,
            zorder=ly)

        self.ax.plot(
            self.locx,
            -(self.okh + self.low) + yc,
            color = 'black',
            linewidth=0.5,
            zorder=ly)


    def plotLayer1(self):
        yc = self.yCorrection
        ly = 1
        self.ax.fill_between(
            self.locx,
            np.minimum(self.bandTop, self.okh + yc),
            np.minimum(self.bandTop, self.okh + self.high + yc),
            alpha = 0.8,
            zorder = ly,
            color=COLOR2)
        
        self.ax.fill_between(
            self.locx,
            np.maximum(self.bandBottom, -self.okh + yc),
            np.maximum(self.bandBottom, (-self.okh - self.low) + yc),
            alpha=0.8,
            color=COLOR3,
            zorder=0)

        self.ax.plot(
            self.locx,
            np.minimum(self.bandTop, self.okh + self.high + yc),
            color = 'black', linewidth=0.5,
            zorder=ly)

        self.ax.plot(
            self.locx,
            np.maximum(self.bandBottom, -(self.okh + self.low) + yc),
            color = 'black',
            linewidth=0.5,
            zorder=ly)
        

    def plotLayer2(self):
        yc = self.yCorrection
        ly=2
        self.ax.fill_between(
            self.locx,
            -self.okh + yc,
            self.okh + yc,
            alpha = 1,
            color=COLOR1,
            zorder=ly)
        
        self.ax.plot(
            self.locx,
            self.okh + yc,
            color = 'black',
            linewidth=0.5,
            zorder=ly)

        self.ax.plot(
            self.locx,
            -self.okh + yc,
            color = 'black',
            linewidth=0.5,
            zorder=ly)



    def setYticks2(self):
        self.plot.yTicks2.append(self.yCorrection - self.data.medianH)
        self.plot.yTicks2.append(self.yCorrection)
        self.plot.yTicks2.append(self.yCorrection + self.data.medianH)
        self.plot.yTickLabels2.append("%s" % -self.data.medianH)
        self.plot.yTickLabels2.append("0")
        self.plot.yTickLabels2.append("%s" % self.data.medianH)
        self.ax.axhline(
            self.yCorrection - self.data.medianH,
            alpha=0.3,
            color='black')
        self.ax.axhline(
            self.yCorrection + self.data.medianH,
            alpha=0.3,
            color='black')
        
plot.plotBands(plotter, layers=3)
plot.save()

#         #yAx.set_ticks(range(minY, maxY, 200))
#         #ax.set_xlim(nstart,nstop+1)

# ax.set_ylim(tminY,tmaxY)
# #fig.autofmt_ydate()
# yAx = ax.get_yaxis()
# yAx.set_ticks(yTicks)
# yAx.set_ticklabels(yTickLabels)

# y2 = ax.twinx()
# y2.get_yaxis().set_ticks(yTicks2)
# y2.get_yaxis().set_ticklabels(yTickLabels2)
# y2.set_ylim(tminY,tmaxY)


#     outFileName = seqId

# if options.start or options.end:
#     outFileName += "_%d_%d" % (pStart, pEnd)

# for f in options.format:
#     plt.savefig('%s.%s' % (outFileName, f), dpi=100)

 
