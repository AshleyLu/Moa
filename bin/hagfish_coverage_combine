#!/usr/bin/env python

import os
import sys

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab

import logging
import optparse
import subprocess

## Arguments: General options 
parser = optparse.OptionParser()
parser.add_option('-v', dest='verbose', action="count", 
                  help='Show debug information')

options, args = parser.parse_args()

inputDir = args[0]

l = logging.getLogger('hagfish')
handler = logging.StreamHandler()
logmark = chr(27) + '[0;37;44mHAGFISH' + \
          chr(27) + '[0m ' 

formatter = logging.Formatter(
    logmark + '%(levelname)-6s %(message)s')

handler.setFormatter(formatter)
l.addHandler(handler)

if options.verbose >= 2:
    l.setLevel(logging.DEBUG)
elif options.verbose == 1:
    l.setLevel(logging.INFO)
else:
    l.setLevel(logging.WARNING)

if __name__ == '__main__':

    if inputDir[-1] == '/': 
        inputDir = inputDir[:-1]
    seqId = os.path.basename(inputDir)

    #concatenate all coverage plots into one
    r_ok = None
    r_low = None
    r_high = None

    for inputFile in os.listdir(inputDir):
        if not inputFile[-13:] == '.coverage.npz': continue
        if 'combined.coverage.npz' in inputFile: continue
        bamBase = os.path.basename(inputFile).replace(
            '.coverage.npz', '')
        l.info("processing %s" % inputFile)
        #read the coverage plots
        data = np.load(os.path.join(inputDir, inputFile))
        if r_ok == None:
            r_ok = data['r_ok']
            r_high = data['r_high']
            r_low = data['r_low']
        else:
            r_ok += data['r_ok']
            r_high += data['r_high']
            r_low += data['r_low']
        l.info("Max low ok high %d %d %d" % (
                np.max(r_low), np.max(r_ok), np.max(r_high)))

    np.savez(os.path.join(inputDir, 'combined.coverage'),
             r_ok = r_ok,
             r_high = r_high,
             r_low = r_low)
 
