#!/usr/bin/env python

import os
import sys
import string

import numpy as np

import logging
import optparse

import Queue
import threading

## Arguments: General options 
parser = optparse.OptionParser()
parser.add_option('-v', dest='verbose', action="count", 
                  help='Show debug information')


options, args = parser.parse_args()

inputFile = args[0]

l = logging.getLogger('hagfish')
handler = logging.StreamHandler()
logmark = chr(27) + '[0;37;44mHAGFISH' + \
          chr(27) + '[0m ' 

formatter = logging.Formatter(
    logmark + '%(levelname)-6s %(message)s')

handler.setFormatter(formatter)
l.addHandler(handler)

if options.verbose >= 2:
    l.setLevel(logging.DEBUG)
elif options.verbose == 1:
    l.setLevel(logging.INFO)
else:
    l.setLevel(logging.WARNING)

def error(message):
    l.critical(message)
    sys.exit(-1)


def getSequenceInfo():

    seqInfo = {}
    l.debug("get sequence info from %s" % inputFile)

    for i in os.listdir('seqInfo'):
        if i[-8:] == '.seqinfo':
            seqinfofile = i
            break
    else:
        error("Cannot find a seqInfo file")
    seqInfoFile = os.path.join('seqInfo', seqinfofile)

    with open(seqInfoFile) as F:
        seqInfo = pickle.load(F)
    return seqInfo


if __name__ == '__main__':

    seqInfo = getSequenceInfo()

    if not os.path.exists('snps'):
        os.mkdir('snps')

    seqId = None

    with open(inputFile) as F:
        for line in F.readline():
            si, pos, rest = line.split(None, 2)
            if si != seqId:
                if seqId != None:
                    
                
