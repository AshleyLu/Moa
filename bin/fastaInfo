#!/usr/bin/env python
# 
# Copyright 2009 Mark Fiers, Plant & Food Research
# 
# This file is part of Moa - http://github.com/mfiers/Moa
# 
# Moa is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
# 
# Moa is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Moa.  If not, see <http://www.gnu.org/licenses/>.
# 

import re
import os
import sys
import site
import math
import optparse

#moa specific libs - first set the path
if not os.environ.has_key('MOABASE'):
    raise Exception("MOABASE is undefined")

#process the .pth file in the $MOABASE/bin folder !
site.addsitedir(os.path.join(os.environ['MOABASE'], 'lib', 'python'))
import moa
import stats.stats as s

parser = optparse.OptionParser()

parser.add_option('-i', dest='infile',
    help = 'input fasta file')
parser.set_defaults(delim="\t")

parser.add_option('-d', dest='delim', help = 'output field delimiter')
parser.add_option('-x', dest='maxno', type='int', 
                  help = 'max no of sequences to process')
parser.add_option('-s', dest='stats', help = 'stats mode - generate averages',
                  action='store_true')
parser.add_option('-e', dest='echo', action="store_true",
    help = 'echo unknown field ids (as opposed to raise an error)')

(options, args) = parser.parse_args()
if not options.infile:
    raise Exception("Must define an inputfile!")


def fastareader(f):
    F = open(f)
    name, seq = "", []
    while True:
        l = F.readline()
        if not l: break
        
        l = l.strip()
        if not l: continue

        if l[0] == '>':
            if name and seq:
                yield name, "".join(seq)
            seq = []
            name = l[1:]
        else:
            seq.append("".join(l.split()).lower())

    if name and seq:
        yield name, "".join(seq)

    F.close()

i = 0

dd = {}
if options.stats:
    for x in args:
        dd[x] = []

funcs = ['length', 'fracn', 'id', 'scaf10', 'scaf100']

def f_id(name, seq):
    return name.split()[0]

def f_length(name,seq):
    return len(seq)

def f_fracn(name, seq):
    return float(seq.count('n')) / len(seq)

scaf10rex = re.compile(r'n{10,}')
scaf100rex = re.compile(r'n{100,}')
def f_scaf10(name,seq):
    return len(scaf10rex.split(seq))

def f_scaf100(name,seq):
    return len(scaf100rex.split(seq))

for name, seq in fastareader(options.infile):
    i += 1
    if options.maxno and i > options.maxno: 
        break

    if options.stats:
        for what in args:
            dd[what].append(eval('f_%s(name, seq)' % what))
    else:

        for what in args:
            if what == "name":
                sys.stdout.write("%s" % name)
            elif what in funcs:
                es = 'f_%s(name, seq)' % what
                v = eval(es)
                sys.stdout.write("%s" % v)
            else:
                if options.echo:
                    sys.stdout.write("%s" % what)
                else:
                    raise Exception("Unknown field %s" % what)
            sys.stdout.write(options.delim)

        sys.stdout.write("\n")


if not options.stats:
    sys.exit(0)

if len(dd) == 0:
    print "no results"
    sys.exit(0)

def getbinrange(min, max):
    ibinsize = str((max - min) / 20)
    #bbin = {(ibinsize[0])+1) + ('0' * (len(ibinsize)-1))
    #print min, max, ibinsize,   bbin
    #binMax = int(10 ** math.ceil(math.log10(max)))
    #binMin = int(10 ** math.floor(math.log10(min)))
    #print binMin, binMax, ibinsize

#getbinrange(100,100000)
#getbinrange(8000,100000)
#getbinrange(5000,6000)

print '#what\tno\tmax\tmin\tsum\taverage\tmedian\tstdev\tn50'
for what in args:
    d = dd[what]
    if type(d[0]) == type('hi'):
        continue
    M = max(d)
    #binMax = int(10 ** math.ceil(math.log10(max(d))))
    #binMin = int(10 ** math.floor(math.log10(min(d))))
    #print binMin, binMax
    #bins = range(binMin, binMax, int((binMax - binMin)/20))
    #print bins
    #calc n50
    __n50sum = 0
    __n50half = sum(d) / 2.0
    _n50 = d[0]
    for i in d:
        _n50 = i
        __n50sum += i
        if __n50sum > __n50half:
            break

    print "\t".join(map(str, [what, 
                              len(d), 
                              max(d),
                              min(d),
                              sum(d),
                              s.mean(d),
                              s.median(d),
                              s.stdev(d),
                              _n50]))
    #print s.ahistogram(d, 20)
