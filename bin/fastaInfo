#!/usr/bin/env python

import os
import sys
import optparse
import re

parser = optparse.OptionParser()

parser.add_option('-i', dest='infile',
    help = 'input fasta file')
parser.set_defaults(delim="\t")

parser.add_option('-d', dest='delim', help = 'output field delimiter')
parser.add_option('-x', dest='maxno', type='int', 
                  help = 'max no of sequences to process')
parser.add_option('-s', dest='stats', help = 'stats mode - generate averages',
                  action='store_true')
parser.add_option('-e', dest='echo', action="store_true",
    help = 'echo unknown field ids (as opposed to raise an error)')

(options, args) = parser.parse_args()
if not options.infile:
    raise Exception("Must define an inputfile!")


def fastareader(f):
    F = open(f)
    name, seq = "", []
    while True:
        l = F.readline()
        if not l: break
        
        l = l.strip()
        if not l: continue

        if l[0] == '>':
            if name and seq:
                yield name, "".join(seq)
            seq = []
            name = l[1:]
        else:
            seq.append("".join(l.split()).lower())

    if name and seq:
        yield name, "".join(seq)

    F.close()

i = 0

dd = {}
if options.stats:
    for x in args:
        dd[x] = []

funcs = ['length', 'fracn', 'id', 'scaf10', 'scaf100']

def f_id(name, seq):
    return name.split()[0]

def f_length(name,seq):
    return len(seq)

def f_fracn(name, seq):
    return float(seq.count('n')) / len(seq)

scaf10rex = re.compile(r'n{10,}')
scaf100rex = re.compile(r'n{100,}')
def f_scaf10(name,seq):
    return len(scaf10rex.split(seq))

def f_scaf100(name,seq):
    return len(scaf100rex.split(seq))



for name, seq in fastareader(options.infile):
    i += 1
    if options.maxno and i > options.maxno: 
        break

    if options.stats:
        for what in args:
            dd[what].append(eval('f_%s(name, seq)' % what))
    else:

        for what in args:
            if what == "name":
                sys.stdout.write("%s" % name)
            elif what in funcs:
                es = 'f_%s(name, seq)' % what
                v = eval(es)
                sys.stdout.write("%s" % v)
            else:
                if options.echo:
                    sys.stdout.write("%s" % what)
                else:
                    raise Exception("Unknown field %s" % what)
            sys.stdout.write(options.delim)

        sys.stdout.write("\n")


if options.stats:
    if len(dd) == 0:
        print "no results"
        sys.exit(0)

    print '#what no max min sum average median stdev n50'
    for what in args:
        d = dd[what]
        if type(d[0]) == type('hi'):
            continue
        d.sort() #for median
        _len = len(d)
        _max = max(d)
        _min = min(d)
        _sum = sum(d)
        _avg = float(_sum) / _len
        _med = d[_len // 2]
        __sdsq = sum([(i - _avg) ** 2 for i in d])
        _sd = (float (__sdsq) / (_len - 1)) ** 0.5
        
        #calc n50
        __n50sum = 0
        __n50half = _sum / 2.0
        _n50 = d[0]
        for i in d:
            _n50 = i
            __n50sum += i
            if __n50sum > __n50half:
                break

        print what,  \
               _len, \
               _max, \
               _min, \
               _sum, \
               _avg, \
               _med, \
               _sd,  \
               _n50
    
