#!/usr/bin/env python
# 
# Copyright 2009 Mark Fiers, Plant & Food Research
# 
# This file is part of Moa - http://github.com/mfiers/Moa
# 
# Moa is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
# 
# Moa is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Moa.  If not, see <http://www.gnu.org/licenses/>.
# 
"""
converts a fasta file to and from r2

The script checks if the input if fasta or r2 and subsequenctly converts
the file(s) to the other format.

Multiple fasta files get converted into a single r2 file. An r2 file
can be converted to multifasta or multiple fasta files

"""
import os
import re
import sys
import optparse

def fastaWriter(F, seqId, seq):
    """
    param F: File handle in 'w' mode
    param seqId: seqId to save
    param seq: sequence to save    
    """
    F.write(">%s\n%s\n" % (seqId, seq))
    
    
def r2Writer(F, seqId, seq):
    """
    param F: File handle in 'w' mode
    param seqId: seqId to save
    param seq: sequence to save    
    """
    F.write("%s %s\n" % (seqId, seq))

def r2Reader(firstLine, F):
    while True:
        if firstLine: 
            line = firstLine
            firstLine = None
        else: 
            line = F.readline()
        if not line: break        
        res = line.strip().split()
        if res: yield res
        
def fastaReader(firstLine, F):
    """
    param F: File handle
    """
    
    seqId, head, seq = "",  "", []
    while True:
        if firstLine: 
            l = firstLine
            firstLine = None
        else: 
            l = F.readline()

        if not l: break
        
        l = l.strip()
        if not l: continue

        if l[0] == '>':
            if seqId and seq:
                yield seqId, "".join(seq)
            seq = []
            ls = l[1:].split(None, 1)
            seqId = ls[0]
            if seqId[:2] == 'gi':
                seqId = "GI" + seqId.split("|",2)[1]
        else:
            seq.append("".join(l.split()).lower())

    if seqId and seq:
        yield seqId, "".join(seq)
    F.close()

def cleanId(s):
    s = re.sub('\.fasta$', '', s)
    s = re.sub('\.fa$', '', s)
    s = re.sub('\.fna$', '', s)
    s = re.sub('\.seq$', '', s)
    s = re.sub(' ', '_', s)
    return s


while True:
    line = sys.stdin.readline()
    if not line: break
    line = line.strip()
    if not line: continue
    sys.stderr.write("x111" + line + "\n")
    if line[0] == ">":
        sys.stderr.write("fasta in r2 out")
        inputHandler = fastaReader
        outputHandler = r2Writer
    else:
        sys.stderr.write("r2 in fasta out")
        inputHandler = r2Reader
        outputHandler = fastaWriter
    for x in inputHandler(line, sys.stdin):
        try:
            seqId, seq = x
        except:
            print x
            sys.stderr.write(str(x) + str(inputHandler))
            raise
        outputHandler(sys.stdout, seqId, seq)

    break



