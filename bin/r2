#!/usr/bin/env python
# 
# Copyright 2009 Mark Fiers, Plant & Food Research
# 
# This file is part of Moa - http://github.com/mfiers/Moa
# 
# Moa is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
# 
# Moa is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Moa.  If not, see <http://www.gnu.org/licenses/>.
# 
"""
converts a fasta file to and from r2

The script checks if the input if fasta or r2 and subsequenctly converts
the file(s) to the other format.

Multiple fasta files get converted into a single r2 file. An r2 file
can be converted to multifasta or multiple fasta files

"""
import os
import re
import sys
import optparse


def fastaWriter(F, seqId, seq):
    """
    param F: File handle in 'w' mode
    param seqId: seqId to save
    param seq: sequence to save    
    """
    F.write(">%s\n%s\n" % (seqId, seq))
    
    
def r2Writer(F, seqId, seq):
    """
    param F: File handle in 'w' mode
    param seqId: seqId to save
    param seq: sequence to save    
    """
    F.write("%s %s\n" % (seqId, seq))

def r2Reader(F):
    while True:
        line = F.readline().strip()
        yield line.split()
        
def fastaReader(F):
    """
    param F: File handle
    """
    
    seqId, head, seq = "",  "", []
    while True:
        l = F.readline()
        if not l: break
        
        l = l.strip()
        if not l: continue

        if l[0] == '>':
            if seqId and seq:
                yield seqId, "".join(seq)
            seq = []
            ls = l[1:].split(None, 1)
            seqId = ls[0]
            if seqId[:2] == 'gi':
                seqId = "GI" + seqId.split("|",2)[1]
        else:
            seq.append("".join(l.split()).lower())

    if seqId and seq:
        yield seqId, "".join(seq)
    F.close()



parser = optparse.OptionParser()
parser.set_defaults(mode='fr')
parser.add_option('--ff', dest='mode', action='store_const', const='ff',
                  help = 'input fasta, output fasta')
parser.add_option('--fr', dest='mode', action='store_const', const='fr',
                  help = 'input fasta, output = r2')
parser.add_option('--rf', dest='mode', action='store_const', const='rf',
                  help = 'input r2, output = fasta')
parser.add_option('--rr', dest='mode', action='store_const', const='rr',
                  help = 'input r2, output = r2')

parser.add_option('-T', dest='idFromFile', action='store_true',
                  help='Take fasta Ids from the filename, when reading ' +
                  'a set of fasta sequences directly' )

(options, args) = parser.parse_args()
if options.mode == 'ff':
    inputHandler = fastaReader
    outputHandler = fastaWriter
elif options.mode == 'fr':
    inputHandler = fastaReader
    outputHandler = r2Writer
elif options.mode == 'fr':
    inputHandler = r2Reader
    outputHandler = fastaWriter
elif options.mode == 'fr':
    inputHandler = r2Reader
    outputHandler = r2Writer


def handleOne(I, forceId):
    i = 0
    thisForceId = forceId
    for seqId, seq in inputHandler(I):
        if forceId:
            outputHandler(sys.stdout, thisForceId, seq)
        else:
            outputHandler(sys.stdout, seqId, seq)
        i += 1
        thisForceId = "%s%03d" % (forceId, i)


def cleanId(s):
    s = re.sub('\.fasta$', '', s)
    s = re.sub('\.fa$', '', s)
    s = re.sub('\.fna$', '', s)
    s = re.sub('\.seq$', '', s)
    s = re.sub(' ', '_', s)
    return s

#see if there are filenames to be read
if args:
    for inFile in args:
        if options.idFromFile:
            thisId = cleanId(inFile)
        else:
            thisId = False
            
        with open(inFile, 'r') as F:
            handleOne(F, thisId)
else:
    handleOne(sys.stdin, False)
    


