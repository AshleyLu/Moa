#!/usr/bin/env python

import os
import sys
import math

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib as mpl
#import matplotlib.rc as rc
import pylab as pl

import logging
import optparse
import subprocess

## Arguments: General options 
parser = optparse.OptionParser()
parser.add_option('-v', dest='verbose', action="count", 
                  help='Show debug information')
parser.set_defaults(ntPerLine=1e6)
parser.add_option('-n', dest='ntPerLine',
                  help='no nucleotides per band')
parser.add_option('-i', dest='inputFile',
                  help='input file with the coverage data (npz, if not specified, '+
                  'the input file name will be inferred from the sequence Id')
parser.add_option('-l', dest='log', action='store_true',
                  help='take the log10 of the coverage')

parser.add_option('-A', dest='alayout', action='store_true',
                  help='Alternative layout')

parser.set_defaults(yfrac=0.95)

parser.add_option('-Y', dest='yfrac', type='float', help='percentage of the "ok" '
                  'fraction that must fall inside the Y boundaries of the graph - use '
                  'this to scale the y axis')
parser.add_option('-s', dest='start',
                  help='Start position (nt) of the plot')
parser.add_option('-e', dest='end',
                  help='End position (nt) of the plot')
parser.add_option('--ymax', dest='ymax',
                  help='Max value for the y axis')
parser.add_option('-o', dest='outfile',
                  help='Output file name')
parser.add_option('-f', dest='format', action='append',
                  help='Output format (may be defined more than once)')

options, args = parser.parse_args()

seqId = args[0]

l = logging.getLogger('hagfish')
handler = logging.StreamHandler()
logmark = chr(27) + '[0;37;44mHAGFISH' + \
          chr(27) + '[0m ' 

formatter = logging.Formatter(
    logmark + '%(levelname)-6s %(message)s')

handler.setFormatter(formatter)
l.addHandler(handler)

if options.verbose >= 2:
    l.setLevel(logging.DEBUG)
elif options.verbose == 1:
    l.setLevel(logging.INFO)
else:
    l.setLevel(logging.WARNING)



def smooth(x,window_len=11,window='hanning'):
    """smooth the data using a window with requested size.
    
    This method is based on the convolution of a scaled window with the signal.
    The signal is prepared by introducing reflected copies of the signal 
    (with the window size) in both ends so that transient parts are minimized
    in the begining and end part of the output signal.
    
    input:
        x: the input signal 
        window_len: the dimension of the smoothing window; should be an odd integer
        window: the type of window from 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'
            flat window will produce a moving average smoothing.

    output:
        the smoothed signal
        
    example:

    t=linspace(-2,2,0.1)
    x=sin(t)+randn(len(t))*0.1
    y=smooth(x)
    
    see also: 
    
    np.hanning, np.hamming, np.bartlett, np.blackman, np.convolve
    scipy.signal.lfilter
 
    TODO: the window parameter could be the window itself if an array instead of a string   
    """

    if x.ndim != 1:
        raise ValueError, "smooth only accepts 1 dimension arrays."

    if x.size < window_len:
        raise ValueError, "Input vector needs to be bigger than window size."

    if window_len<3: return x

    if not window in ['flat', 'hanning', 'hamming', 'bartlett', 'blackman']:
        raise ValueError, "Window must be one of 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'"

    s=np.r_[2*x[0]-x[window_len:1:-1],x,2*x[-1]-x[-1:-window_len:-1]]
    #print(len(s))
    if window == 'flat': #moving average
        w=np.ones(window_len,'d')
    else:
        w=eval('np.'+window+'(window_len)')

    y=np.convolve(w/w.sum(),s,mode='same')
    return y[window_len-1:-window_len+1]


def smoother(a, steps):
    result = np.zeros(len(a) - steps + 1)
    for fr in range(steps):
        to = - (steps - fr - 1)
        if to == 0: to = None
        result += a[fr:to]        
    return result / float(steps)


def quant(x, w):
    xs = np.sort(x)
    return xs[int(len(xs) * w)]
    
if __name__ == '__main__':

    l.info("This is sequence: %s" % seqId)
    
    if options.inputFile:
        inputFile = options.inputFile
    else:
        inputFile = os.path.join('combined', 
                                 '%s.combined.coverage.npz' % seqId)
    data = np.load(inputFile)
    r_ok = data['r_ok']
    r_high = data['r_high']
    r_low = data['r_low']

    seqLen = len(r_ok)

    if options.start:
        pStart = int(float(options.start))
    else:
        pStart = 0
    if options.end:
        pEnd = int(float(options.end))
        if pEnd > seqLen: pEnd = seqLen
    else:
        pEnd = seqLen

    plotLen = pEnd - pStart

    ntPerLine = int(float(options.ntPerLine))
    if ntPerLine > plotLen:
        ntPerLine = plotLen

    l.info("nucleotides per line: %d" % ntPerLine)

    l.info("Plotting from %d to %d (%d nt)" % (
        pStart, pEnd, plotLen))

    r_all = r_low + r_high + r_ok
    r_okh = 0.5 * r_ok

    #max value - else all space is taken up by the peaks
    
    r_x = np.arange(0, seqLen, dtype="int")
    r_z = np.zeros_like(r_x)

    noLines = int(math.ceil(plotLen / float(ntPerLine)))

    l.info("going to plot %d lines" % noLines)
#    l.info("y axis is between %d and %d" % (minY, maxY))

    mpl.rcParams['axes.labelsize'] = 'x-small'
    mpl.rcParams['xtick.labelsize'] = 'xx-small'
    mpl.rcParams['ytick.labelsize'] = 'xx-small'

    fig = plt.figure(figsize=(10,2*noLines+2))

    _MC = 0.10 - (0.01 * min(8, noLines))
    fig.subplots_adjust(0.03,_MC,0.95,0.95-(2*_MC))
    
    for line in range(noLines):        
    
        nstart = pStart + (line * ntPerLine)
        nstop = nstart + (ntPerLine - 1)
 
        l.debug('printing line %d from %d to %d' % (
            line, nstart, nstop))

        ax = fig.add_subplot(noLines,1,line+1)
        ax2 = ax.twinx()

        if line == 0:
            ax.set_title('Coverage plot for "%s" (%d to %d)' % (
                    seqId, pStart, pEnd))

        if options.ymax: maxY = int(options.ymax)
        else: maxY = int(quant(r_ok[pStart:pEnd], options.yfrac))

        minY = 0
        
        ax.fill_between(
            r_x[nstart:nstop] - maxY,
            r_z[nstart:nstop] - maxY,
            r_low[nstart:nstop] - maxY,
            color="#8888ff")

        ax.fill_between(
            r_x[nstart:nstop],
            r_z[nstart:nstop],
            r_ok[nstart:nstop],
            color="#88ff88")

        ax.fill_between(
            r_x[nstart:nstop] + maxY,
            r_z[nstart:nstop] + maxY,
            r_high[nstart:nstop] + maxY,
            color="#ff8888")


        #l.info("ok-median %f" % np.median(r_ok))
        #q = r_ok - (np.maximum(np.minimum(np.median(r_ok), (r_high + r_low)) - r_ok, 0))

        #s = r_ok - (np.minimum(np.median(r_ok), (r_high + r_low)) - r_ok)
        medOk = np.median(r_ok)
        sa = (medOk * (1 - np.exp(-1 * (r_high + r_low))))
        print sa
        #ax.plot(r_x[nstart:nstop], q[nstart:nstop], color='darkblue', linewidth=1)
        #ax.plot(r_x[nstart:nstop], s[nstart:nstop], color='blue', linewidth=1)
        #ax.plot(r_x[nstart:nstop], sa[nstart:nstop], color='purple', linewidth=0.5)

        SM = True
        if SM:
            _w = 'flat'
            _wl = 5000
            s_high = smooth(r_high, window=_w, window_len=_wl)
            s_ok = smooth(r_ok, window=_w, window_len=_wl)
            s_low = smooth(r_low, window=_w, window_len=_wl)


        if SM:
            DFF = np.vectorize(lambda a,b:b-a)
            d_ok = DFF(s_ok[:-1],s_ok[1:])
            d_low = DFF(s_low[:-1],s_low[1:])
            d_high = DFF(s_high[:-1],s_high[1:])

            ax2.plot(r_x[nstart:nstop], d_ok[nstart:nstop] * 10, color='darkgreen')
            #ax2.plot(r_x[nstart:nstop], d_low[nstart:nstop], color='darkblue')
            ax2.plot(r_x[nstart:nstop], d_high[nstart:nstop] * 10, color='darkred')

            ws = 10000
            hws = int(ws * 0.5)
            step = 10
            dxs = []
            dds = []

            for i in range(nstart, nstop-step, 10):
                wista = max(0,i - hws)
                wisto = min(pEnd, i + hws)
                cv = np.corrcoef(d_ok[wista:wisto], d_high[wista:wisto])[0][1]

    #            print "\t".join([str(x) for x in [nstart, nstop, hws, step, i, wista, wisto, cv]])

                dxs.append(i)
                dds.append(cv)

        #ax2.plot(dxs, dds, color='orange', linewidth=2)

        yAx = ax.get_yaxis()
        yAx.set_ticks(range(100, maxY, 200))

        ax.set_ylim(-maxY,3*maxY)
        ax.set_xlim(nstart,nstop+1)
        ax2.set_xlim(nstart,nstop+1)
        ax2.set_ylim(-1, 1)
        


    if options.outfile:            
        outFileName = options.outfile
    else:
        outFileName = seqId

    if options.start or options.end:
        outFileName += "_%d_%d" % (pStart, pEnd)

    for f in options.format:
        plt.savefig('%s.%s' % (outFileName, f), dpi=200)

    # ws = 1000
    # step = 100
    # for i in range(pStart, pEnd - step, step):
    #     cv = np.corrcoef(d_ok[i:i+ws], d_high[i:i+ws])[0][1]

    #     f2 = plt.figure(figsize=(10,2*noLines+2))
    #     f2x = f2.add_subplot(1,1,1)
    #     f2x.scatter(d_ok[i:i+ws], d_high[i:i+ws])
    #     f2x.set_title("cvplot %d %f" % (i + int(ws/2), cv))
    #     plt.savefig('cvplot_%d_%f.png' % (i + int(ws/2), cv))
            

 
