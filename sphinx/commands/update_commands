#!/usr/bin/env python

import os

import Yaco

import moa.utils
import moa.logger as l
import moa.commands

from moa.sysConf import sysConf
sysConf.initialize()

## Command definitions
sysConf.commands = moa.commands.Commands()
sysConf.pluginHandler.run('defineCommands')

from jinja2 import Template as jTemplate

l.setVerbose()

#initialize jinja template
templateFile = os.path.join(
    moa.utils.getMoaBase(), 'lib', 'jinja2', 'command.snippet.rst.jinja2')
template = jTemplate(open(templateFile).read())

MOABASE = moa.utils.getMoaBase()
PLUGINDIR = os.path.join(MOABASE, 'lib', 'python', 'moa', 'plugin')

if os.path.exists('commands.header'):
    command_index_header = open('commands.header').read()
else: command_index_header = ""

if os.path.exists('commands.footer'):
    command_index_footer = open('commands.footer').read()
else: command_index_footer = ""

F = open('index.rst', 'w')

F.write(command_index_header)

allCommands = {}

for plugin in os.listdir(PLUGINDIR):

    if not os.path.isdir(os.path.join(PLUGINDIR, plugin)):
        continue


    l.info("processing plugin %s" % plugin)
    
    modname = 'moa.plugin.%s' % (plugin.replace('.py', ''))
    l.info("looking at module %s" % modname)
    mod =  __import__( modname, globals(),
                       locals(), [modname], -1)
    data = Yaco.Yaco()
    data.commands = {}
    
    if not getattr(mod, 'hook_defineCommands', False):
        l.error('cannot find hook_defineCommands in %s' % plugin)        
        continue

    mod.hook_defineCommands()

    if len(data.commands) == 0: continue

for command in sysConf.commands:
    l.info("processing command %s" % command)

    fi = sysConf.commands[command]
    func =fi['call']
    l.info("func call %s" %  func)
    #extract a longer description from the function docs
    longdesc = ''
    ld = []
    if func.func_doc:        
        ld = func.func_doc.split("\n")
        print ld
        while ld and not ld[0].strip():
            ld.pop(0)
        if ld:
            ws = min([len(x) - len(x.lstrip()) for x in ld if x.strip()])
            ld = [x[ws:] for x in ld]
            longdesc = "\n".join(ld)

    td = {
        'name' : command,
        'desc' : fi['desc'],
        'needsJob' : fi.get('needsJob', True),
        'log' : fi.get('log', True),
        'usage' : fi.get('usage', ""),
        'longdesc' : longdesc
          }
    allCommands[command] = td

allComkeys = sysConf.commands.keys()
allComkeys.sort()
for k in allComkeys:
    dt = allCommands[k]
    F.write(template.render(dt))

F.write(command_index_footer)


F.close()
